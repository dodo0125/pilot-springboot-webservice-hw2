//querydsl 적용을 위해 추가 buildscript
buildscript {
    ext {
        querydslPluginVersion = '1.0.10' // 플러그인 버전
    }
    repositories {
        maven { url "https://plugins.gradle.org/m2/" } // 플러그인 저장소
    }
    dependencies {
        classpath("gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:${querydslPluginVersion}") // querydsl 플러그인 의존성 등록
    }
}

plugins { // (1)
    id 'org.springframework.boot' version '2.4.1' // RELEASE 삭제
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'java'
    id 'java-library'
}



group 'com.jojoldu.book'
version '1.0.4-SNAPSHOT-'+new Date().format("yyyyMMddHHmmss")
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

// for Junit 5
test {
    useJUnitPlatform()
}

apply plugin: 'java-library'
apply plugin: "io.spring.dependency-management" //querydsl 적용을 위해 추가

dependencies {
    //(3)
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-mustache')

    // lombok
    implementation('org.projectlombok:lombok')
    annotationProcessor('org.projectlombok:lombok')
    testImplementation('org.projectlombok:lombok')
    testAnnotationProcessor('org.projectlombok:lombok')

    //spring boot용 Spring Data JPA추상화 라이브러리, spring boot 버전에 맞춰 JPA관련 버전관리
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    //api 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation("org.mariadb.jdbc:mariadb-java-client")
    //인메모리 관계형 데이터베이스, 별도 설치없이 Project의 의존성만으로 관리
    implementation('com.h2database:h2')


    testImplementation('org.springframework.boot:spring-boot-starter-test')

    //아래 코드들은 querydsl 적용을 위해 추가
    compile("com.querydsl:querydsl-core") // querydsl
    compile("com.querydsl:querydsl-jpa") // querydsl
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa" // querydsl JPAAnnotationProcessor 사용 지정
    annotationProcessor("jakarta.persistence:jakarta.persistence-api")
    annotationProcessor("jakarta.annotation:jakarta.annotation-api")

}

//querydsl 적용을 위해 추가
def generated='src/main/generated'
sourceSets {
    main.java.srcDirs += [ generated ]
}

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(generated)
}

clean.doLast {
    file(generated).deleteDir()
}
